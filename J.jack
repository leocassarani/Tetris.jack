class J {
    function void show(Tetromino tetromino, Board board) {
        var int col, row, rotation;

        let col = tetromino.getCol();
        let row = tetromino.getRow();
        let rotation = tetromino.getRotation();

        if (rotation = 0) {
            // ■
            // ■■■
            do board.fill(col, row);
            do board.fill(col, row - 1);
            do board.fill(col + 1, row - 1);
            do board.fill(col + 2, row - 1);
        } else {
            if (rotation = 1) {
                // ■■
                // ■
                // ■
                do board.fill(col, row);
                do board.fill(col + 1, row);
                do board.fill(col, row - 1);
                do board.fill(col, row - 2);
            } else {
                if (rotation = 2) {
                    // ■■■
                    //   ■
                    do board.fill(col, row);
                    do board.fill(col + 1, row);
                    do board.fill(col + 2, row);
                    do board.fill(col + 2, row - 1);
                } else {
                    //  ■
                    //  ■
                    // ■■
                    do board.fill(col + 1, row);
                    do board.fill(col + 1, row - 1);
                    do board.fill(col + 1, row - 2);
                    do board.fill(col, row - 2);
                }
            }
        }

        return;
    }

    function void step(Tetromino tetromino, Board board) {
        var int col, row, rotation;

        let col = tetromino.getCol();
        let row = tetromino.getRow();
        let rotation = tetromino.getRotation();

        if (row < J.height(rotation)) {
            return;
        }

        if (rotation = 0) {
            if (
                board.isFull(col, row - 2)     |
                board.isFull(col + 1, row - 2) |
                board.isFull(col + 2, row - 2)
            ) {
                return;
            }

            do board.unfill(col, row);
            do board.unfill(col + 1, row - 1);
            do board.unfill(col + 2, row - 1);
        } else {
            if (rotation = 1) {
                if (
                    board.isFull(col + 1, row - 1) |
                    board.isFull(col, row - 3)
                ) {
                    return;
                }

                do board.unfill(col, row);
                do board.unfill(col + 1, row);
            } else {
                if (rotation = 2) {
                    if (
                        board.isFull(col, row - 1) |
                        board.isFull(col + 2, row - 2)
                    ) {
                        return;
                    }

                    do board.unfill(col, row);
                    do board.unfill(col + 1, row);
                    do board.unfill(col + 2, row);
                } else {
                    if (
                        board.isFull(col, row - 3) |
                        board.isFull(col + 1, row - 3)
                    ) {
                        return;
                    }

                    do board.unfill(col + 1, row);
                    do board.unfill(col, row - 2);
                }
            }
        }

        do tetromino.setRow(row - 1);
        do J.show(tetromino, board);

        return;
    }

    function void moveLeft(Tetromino tetromino, Board board) {
        var int col, row, rotation;

        let col = tetromino.getCol();
        let row = tetromino.getRow();
        let rotation = tetromino.getRotation();

        if (col = 0) {
            return;
        }

        if (rotation = 0) {
            if (
                board.isFull(col - 1, row) |
                board.isFull(col - 1, row - 1)
            ) {
                return;
            }

            do board.unfill(col, row);
            do board.unfill(col + 2, row - 1);
        } else {
            if (rotation = 1) {
                if (
                    board.isFull(col - 1, row)     |
                    board.isFull(col - 1, row - 1) |
                    board.isFull(col - 1, row - 2)
                ) {
                    return;
                }

                do board.unfill(col + 1, row);
                do board.unfill(col, row - 1);
                do board.unfill(col, row - 2);
            } else {
                if (rotation = 2) {
                    if (
                        board.isFull(col - 1, row) |
                        board.isFull(col + 1, row - 1)
                    ) {
                        return;
                    }

                    do board.unfill(col + 2, row);
                    do board.unfill(col + 2, row - 1);
                } else {
                    if (
                        board.isFull(col, row)     |
                        board.isFull(col, row - 1) |
                        board.isFull(col - 1, row - 2)
                    ) {
                        return;
                    }

                    do board.unfill(col + 1, row);
                    do board.unfill(col + 1, row - 1);
                    do board.unfill(col + 1, row - 2);
                }
            }
        }

        do tetromino.setCol(col - 1);
        do J.show(tetromino, board);

        return;
    }

    function void moveRight(Tetromino tetromino, Board board) {
        var int col, row, rotation;

        let col = tetromino.getCol();
        let row = tetromino.getRow();
        let rotation = tetromino.getRotation();

        if ((col + J.width(rotation)) > 9) {
            return;
        }

        if (rotation = 0) {
            if (
                board.isFull(col + 1, row) |
                board.isFull(col + 3, row - 1)
            ) {
                return;
            }

            do board.unfill(col, row);
            do board.unfill(col, row - 1);
        } else {
            if (rotation = 1) {
                if (
                    board.isFull(col + 2, row)     |
                    board.isFull(col + 1, row - 1) |
                    board.isFull(col + 1, row - 2)
                ) {
                    return;
                }

                do board.unfill(col, row);
                do board.unfill(col, row - 1);
                do board.unfill(col, row - 2);
            } else {
                if (rotation = 2) {
                    if (
                        board.isFull(col + 3, row) |
                        board.isFull(col + 3, row - 1)
                    ) {
                        return;
                    }

                    do board.unfill(col, row);
                    do board.unfill(col + 2, row - 1);
                } else {
                    if (
                        board.isFull(col + 2, row)     |
                        board.isFull(col + 2, row - 1) |
                        board.isFull(col + 2, row - 2)
                    ) {
                        return;
                    }

                    do board.unfill(col + 1, row);
                    do board.unfill(col + 1, row - 1);
                    do board.unfill(col, row - 2);
                }
            }
        }

        do tetromino.setCol(col + 1);
        do J.show(tetromino, board);

        return;
    }

    function void rotate(Tetromino tetromino, Board board) {
        var int col, row, rotation;

        let col = tetromino.getCol();
        let row = tetromino.getRow();
        let rotation = tetromino.getRotation();

        if (rotation = 0) {
            if ((row - 1) < J.height(rotation)) {
                return;
            }

            if (
                board.isFull(col + 1, row) |
                board.isFull(col + 2, row) |
                board.isFull(col + 1, row - 2)
            ) {
                return;
            }

            do board.unfill(col, row);
            do board.unfill(col, row - 1);
            do board.unfill(col + 2, row - 1);

            do tetromino.setCol(col + 1);
            do tetromino.setRotation(1);
            do J.show(tetromino, board);
        } else {
            if (rotation = 1) {
                if (col = 0) {
                    return;
                }

                if (
                    board.isFull(col - 1, row - 1) |
                    board.isFull(col + 1, row - 1) |
                    board.isFull(col + 1, row - 2)
                ) {
                    return;
                }

                do board.unfill(col, row);
                do board.unfill(col + 1, row);
                do board.unfill(col, row - 2);

                do tetromino.setCol(col - 1);
                do tetromino.setRow(row - 1);
                do tetromino.setRotation(2);
                do J.show(tetromino, board);
            } else {
                if (rotation = 2) {
                    if (
                        board.isFull(col + 1, row + 1) |
                        board.isFull(col + 1, row - 1) |
                        board.isFull(col, row - 1)
                    ) {
                        return;
                    }

                    do board.unfill(col, row);
                    do board.unfill(col + 2, row);
                    do board.unfill(col + 2, row - 1);

                    do tetromino.setRow(row + 1);
                    do tetromino.setRotation(3);
                    do J.show(tetromino, board);
                } else {
                    if ((col + J.width(rotation)) > 9) {
                        return;
                    }

                    if (
                        board.isFull(col, row)     |
                        board.isFull(col, row - 1) |
                        board.isFull(col + 2, row - 1)
                    ) {
                        return;
                    }

                    do board.unfill(col + 1, row);
                    do board.unfill(col + 1, row - 2);
                    do board.unfill(col, row - 2);

                    do tetromino.setRotation(0);
                    do J.show(tetromino, board);
                }
            }
        }

        return;
    }

    function int width(int rotation) {
        if ((rotation = 0) | (rotation = 2)) {
            return 3;
        } else {
            return 2;
        }
    }

    function int height(int rotation) {
        if ((rotation = 0) | (rotation = 2)) {
            return 2;
        } else {
            return 3;
        }
    }
}
