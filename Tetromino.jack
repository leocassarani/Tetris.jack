class Tetromino {
    field int type, col, row, rotation;
    field Board board;

    constructor Tetromino new(int typeArg, int colArg, int rowArg, Board boardArg) {
        let type = typeArg;
        let col = colArg;
        let row = rowArg;
        let board = boardArg;
        let rotation = 0;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getCol() {
        return col;
    }

    method void setCol(int colArg) {
        let col = colArg;
        return;
    }

    method int getRow() {
        return row;
    }

    method void setRow(int rowArg) {
        let row = rowArg;
        return;
    }

    method int getRotation() {
        return rotation;
    }

    method void setRotation(int rotationArg) {
        let rotation = rotationArg;
        return;
    }

    method void reset(int typeArg, int colArg, int rowArg) {
        let type = typeArg;
        let col = colArg;
        let row = rowArg;
        let rotation = 0;
        return;
    }

    method void show() {
        if (type = 0) {
            do J.show(this, board, true);
        } else {
            do I.show(this, board, true);
        }
        return;
    }

    method void step() {
        if (type = 0) {
            do J.step(this, board);
        } else {
            do I.step(this, board);
        }
        return;
    }

    method void moveLeft() {
        if (type = 0) {
            do J.moveLeft(this, board);
        } else {
            do I.moveLeft(this, board);
        }
        return;
    }

    method void moveRight() {
        if (type = 0) {
            do J.moveRight(this, board);
        } else {
            do I.moveRight(this, board);
        }
        return;
    }

    method void rotate() {
        if (type = 0) {
            do J.rotate(this, board);
        } else {
            do I.rotate(this, board);
        }
        return;
    }
}
