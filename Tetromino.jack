class Tetromino {
    field int type, col, row, rotation;
    field Board board;

    function void init() {
        do I.init();
        do J.init();
        do L.init();
        do O.init();
        do S.init();
        do T.init();
        do Z.init();
        return;
    }

    constructor Tetromino new(int typeArg, int colArg, int rowArg, Board boardArg) {
        let type = typeArg;
        let col = colArg;
        let row = rowArg;
        let board = boardArg;
        let rotation = 0;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void reset(int typeArg, int colArg, int rowArg) {
        let type = typeArg;
        let col = colArg;
        let row = rowArg;
        let rotation = 0;
        return;
    }

    method void show(boolean fill) {
        var int x, y, i, size;
        var Array tiles;

        let tiles = _tiles(rotation);
        let size = _size();

        do board.setFill(fill);

        while (y < size) {
            let x = 0;

            while (x < size) {
                if (tiles[i]) {
                    do board.fill(col + x, row - y);
                }

                let x = x + 1;
                let i = i + 1;
            }

            let y = y + 1;
        }

        return;
    }

    method boolean step() {
        var int x, y, i, size, max, tile;
        var Array tiles;

        let tiles = _tiles(rotation);
        let size = _size();

        let max = size - 1;

        while (y < size) {
            let x = 0;

            while (x < size) {
                let tile = tiles[i];

                if (y < max) {
                    if (tile & tiles[i + size]) {
                        let tile = false;
                    }
                }

                if (tile) {
                    if (board.isFull(col + x, (row - y) - 1)) {
                        return false;
                    }
                }

                let x = x + 1;
                let i = i + 1;
            }

            let y = y + 1;
        }

        do show(false);
        let row = row - 1;
        do show(true);

        return true;
    }

    method void moveLeft() {
        var int x, y, i, size, tile;
        var Array tiles;

        let tiles = _tiles(rotation);
        let size = _size();

        while (y < size) {
            let x = 0;

            while (x < size) {
                let tile = tiles[i];

                if (x > 0) {
                    if (tile & tiles[i - 1]) {
                        let tile = false;
                    }
                }

                if (tile) {
                    if (board.isFull((col + x) - 1, row - y)) {
                        return;
                    }
                }

                let x = x + 1;
                let i = i + 1;
            }

            let y = y + 1;
        }

        do show(false);
        let col = col - 1;
        do show(true);

        return;
    }

    method void moveRight() {
        var int x, y, i, size, max, tile;
        var Array tiles;

        let tiles = _tiles(rotation);
        let size = _size();

        let max = size - 1;

        while (y < size) {
            let x = 0;

            while (x < size) {
                let tile = tiles[i];

                if (x < max) {
                    if (tile & tiles[i + 1]) {
                        let tile = false;
                    }
                }

                if (tile) {
                    if (board.isFull((col + x) + 1, row - y)) {
                        return;
                    }
                }

                let x = x + 1;
                let i = i + 1;
            }

            let y = y + 1;
        }

        do show(false);
        let col = col + 1;
        do show(true);

        return;
    }

    method void rotate() {
        var int x, y, i, size, nextRotation;
        var Array cur, next;

        let cur = _tiles(rotation);
        let size = _size();

        let nextRotation = (rotation + 1) & 3; // (rotation + 1) mod 4
        let next = _tiles(nextRotation);

        while (y < size) {
            let x = 0;

            while (x < size) {
                if (next[i]) {
                    if (~(cur[i])) {
                        if (board.isFull(col + x, row - y)) {
                            return;
                        }
                    }
                }

                let x = x + 1;
                let i = i + 1;
            }

            let y = y + 1;
        }

        do show(false);
        let rotation = nextRotation;
        do show(true);

        return;
    }

    method Array _tiles(int rotationArg) {
        if (type = 0) {
            return I.tiles(rotationArg);
        } else {
            if (type = 1) {
                return J.tiles(rotationArg);
            } else {
                if (type = 2) {
                    return L.tiles(rotationArg);
                } else {
                    if (type = 3) {
                        return O.tiles(rotationArg);
                    } else {
                        if (type = 4) {
                            return S.tiles(rotationArg);
                        } else {
                            if (type = 5) {
                                return T.tiles(rotationArg);
                            } else {
                                return Z.tiles(rotationArg);
                            }
                        }
                    }
                }
            }
        }
    }

    method int _size() {
        if (type = 0) {
            return I.size();
        } else {
            if (type = 1) {
                return J.size();
            } else {
                if (type = 2) {
                    return L.size();
                } else {
                    if (type = 3) {
                        return O.size();
                    } else {
                        if (type = 4) {
                            return S.size();
                        } else {
                            if (type = 5) {
                                return T.size();
                            } else {
                                return Z.size();
                            }
                        }
                    }
                }
            }
        }
    }
}
