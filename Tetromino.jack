class Tetromino {
    field int col, row, rotation;
    field Board board;

    constructor Tetromino new(int colArg, int rowArg, Board boardArg) {
        let col = colArg;
        let row = rowArg;
        let board = boardArg;
        let rotation = 0;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void reset(int colArg, int rowArg) {
        let col = colArg;
        let row = rowArg;
        let rotation = 0;
        return;
    }

    method void show() {
        if (rotation = 0) {
            // ■
            // ■■■
            do board.fill(col, row);
            do board.fill(col, row - 1);
            do board.fill(col + 1, row - 1);
            do board.fill(col + 2, row - 1);
        } else {
            if (rotation = 1) {
                // ■■
                // ■
                // ■
                do board.fill(col, row);
                do board.fill(col + 1, row);
                do board.fill(col, row - 1);
                do board.fill(col, row - 2);
            } else {
                if (rotation = 2) {
                    // ■■■
                    //   ■
                    do board.fill(col, row);
                    do board.fill(col + 1, row);
                    do board.fill(col + 2, row);
                    do board.fill(col + 2, row - 1);
                } else {
                    //  ■
                    //  ■
                    // ■■
                    do board.fill(col + 1, row);
                    do board.fill(col + 1, row - 1);
                    do board.fill(col + 1, row - 2);
                    do board.fill(col, row - 2);
                }
            }
        }

        return;
    }

    method void step() {
        if ((row - 1) < height()) {
            return;
        }

        if (rotation = 0) {
            do board.empty(col, row);
            do board.empty(col + 1, row - 1);
            do board.empty(col + 2, row - 1);
        } else {
            if (rotation = 1) {
                do board.empty(col, row);
                do board.empty(col + 1, row);
            } else {
                if (rotation = 2) {
                    do board.empty(col, row);
                    do board.empty(col + 1, row);
                    do board.empty(col + 2, row);
                } else {
                    do board.empty(col + 1, row);
                    do board.empty(col, row - 2);
                }
            }
        }

        let row = row - 1;
        do show();

        return;
    }

    method void moveLeft() {
        if (col = 0) {
            return;
        }

        if (rotation = 0) {
            do board.empty(col, row);
            do board.empty(col + 2, row - 1);
        } else {
            if (rotation = 1) {
                do board.empty(col + 1, row);
                do board.empty(col, row - 1);
                do board.empty(col, row - 2);
            } else {
                if (rotation = 2) {
                    do board.empty(col + 2, row);
                    do board.empty(col + 2, row - 1);
                } else {
                    do board.empty(col + 1, row);
                    do board.empty(col + 1, row - 1);
                    do board.empty(col + 1, row - 2);
                }
            }
        }

        let col = col - 1;
        do show();

        return;
    }

    method void moveRight() {
        if ((col + width()) > 9) {
            return;
        }

        if (rotation = 0) {
            do board.empty(col, row);
            do board.empty(col, row - 1);
        } else {
            if (rotation = 1) {
                do board.empty(col, row);
                do board.empty(col, row - 1);
                do board.empty(col, row - 2);
            } else {
                if (rotation = 2) {
                    do board.empty(col, row);
                    do board.empty(col + 2, row - 1);
                } else {
                    do board.empty(col + 1, row);
                    do board.empty(col + 1, row - 1);
                    do board.empty(col, row - 2);
                }
            }
        }

        let col = col + 1;
        do show();

        return;
    }

    method void rotate() {
        if (rotation = 0) {
            if ((row - 1) < height()) {
                return;
            }

            do board.empty(col, row);
            do board.empty(col, row - 1);
            do board.empty(col + 2, row - 1);

            let col = col + 1;
            let rotation = 1;
            do show();
        } else {
            if (rotation = 1) {
                if (col = 0) {
                    return;
                }

                do board.empty(col, row);
                do board.empty(col + 1, row);
                do board.empty(col, row - 2);

                let col = col - 1;
                let row = row - 1;
                let rotation = 2;
                do show();
            } else {
                if (rotation = 2) {
                    do board.empty(col, row);
                    do board.empty(col + 2, row);
                    do board.empty(col + 2, row - 1);

                    let row = row + 1;
                    let rotation = 3;
                    do show();
                } else {
                    if ((col + width()) > 9) {
                        return;
                    }

                    do board.empty(col + 1, row);
                    do board.empty(col + 1, row - 2);
                    do board.empty(col, row - 2);

                    let rotation = 0;
                    do show();
                }
            }
        }

        return;
    }

    method int width() {
        if ((rotation = 0) | (rotation = 2)) {
            return 3;
        } else {
            return 2;
        }
    }

    method int height() {
        if ((rotation = 0) | (rotation = 2)) {
            return 2;
        } else {
            return 3;
        }
    }
}
