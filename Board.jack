class Board {
    field int minX, minY, rows, tile;
    field boolean fill;
    field Array tiles;

    constructor Board new(int x, int y, int rowsArg, int tileArg) {
        var int i, j;
        var Array row;

        let minX = x;
        let minY = y;
        let rows = rowsArg;
        let tile = tileArg;
        let fill = false;
        let tiles = Array.new(rows);

        while (i < rows) {
            let row = Array.new(10);

            while (j < 10) {
                let row[j] = false;
                let j = j + 1;
            }

            let tiles[i] = row;
            let i = i + 1;
        }

        return this;
    }

    method void dispose() {
        var int i;
        var Array row;

        while (i < rows) {
            let row = tiles[i];
            do row.dispose();
        }
        do tiles.dispose();

        do Memory.deAlloc(this);
        return;
    }

    method boolean isFull(int col, int row) {
        var Array tileRow;

        if (row > (rows - 1)) {
            return false;
        }

        let tileRow = tiles[row];
        return tileRow[col];
    }

    method void setFill(boolean fillArg) {
        let fill = fillArg;
        return;
    }

    method void fill(int col, int row) {
        var int x, y;
        var Array tileRow;

        if (row > (rows - 1)) {
            return;
        }

        let x = minX + (tile * col);
        let y = minY + (tile * (rows - (row + 1)));

        if (fill) {
            do drawTile(col, row);
            do Screen.setColor(false);
            do Screen.drawRectangle(x + 4, y + 4, (x + tile) - 4, (y + tile) - 4);
        } else {
            do Screen.setColor(fill);
            do Screen.drawRectangle(x, y, x + tile, y + tile);
        }

        let tileRow = tiles[row];
        let tileRow[col] = fill;

        return;
    }

    method void drawTile(int col, int row) {
        var int x, y, i, max, parity;
        var Array screen;

        let screen = 16384;

        let x = minX + (tile * col);
        let y = minY + (tile * (rows - (row + 1)));

        let parity = (col & 3);

        let i = (y * 32) + (x / 16);
        let max = i + 416; // 13 * 32 = 416

        while (i < max) {
            if (parity = 0) {
                let screen[i] = screen[i] | -16; // 0xFFF0
            } else {
                if (parity = 1) {
                    let screen[i] = screen[i] | 4095; // 0x0FFF
                } else {
                    if (parity = 2) {
                        let screen[i] = screen[i] | -4096; // 0xF000
                        let screen[(i + 1)] = screen[(i + 1)] | 255; // 0x00FF
                    } else {
                        let screen[i] = screen[i] | -256; // 0xFF00
                        let screen[(i + 1)] = screen[(i + 1)] | 15; // 0x000F
                    }
                }
            }
            let i = i + 32;
        }

        return;
    }

    method void drawOutline() {
        var int i;
        var Array screen;

        let screen = 16384;

        // Equivalent to: Screen.drawLine(195, 1, 195, 254)
        let i = 44;
        while (i < 8160) {
            let screen[i] = 8;
            let i = i + 32;
        }

        // Equivalent to: Screen.drawLine(317, 1, 317, 254)
        let i = 51;
        while (i < 8160) {
            let screen[i] = 8192;
            let i = i + 32;
        }

        return;
    }
}
