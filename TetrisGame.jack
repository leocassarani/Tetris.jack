class TetrisGame {
    field Board board;
    field Tetromino tetromino;
    field int type, next, cleared, level, difficulty;
    field boolean exit;

    constructor TetrisGame new() {
        do Screen.clearScreen();

        let cleared = 0;
        let level = 0;
        let difficulty = 12;
        let exit = false;

        if (Random.isReady()) {
            let type = Random.next(7);
            let next = Random.next(7);
        } else {
            let type = 0;
            let next = 1;
        }

        let board = Board.new(196, 2, 21);
        let tetromino = Tetromino.new(type, 3, 19, board);
        do tetromino.show();

        do printScore();
        do showPreview();

        do Output.moveCursor(11, 47);
        do Output.printString("Next:");

        return this;
    }

    method void dispose() {
        do tetromino.dispose();
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var char key;
        var int waited, held, prevKey, prevWaited;

        let waited = difficulty;

        while (~exit) {
            while ((~exit) & (key = 0)) {
                let key = Keyboard.keyPressed();
                do Sys.wait(100);

                let waited = waited - 1;
                if (waited = 0) {
                    do step();
                    let waited = difficulty;
                }
            }

            let held = 0;
            let prevKey = key;
            let prevWaited = waited;

            while ((~exit) & ~(key = 0)) {
                if (~(key = prevKey)) {
                    do Random.keyPress(prevKey, prevWaited, held);
                    let held = 0;
                    let prevKey = key;
                }

                if (key = 130) { // left
                    do tetromino.moveLeft();
                } else {
                    if (key = 132) { // right
                        do tetromino.moveRight();
                    } else {
                        if (key = 131) { // up
                            do tetromino.rotate();
                        } else {
                            if (key = 133) { // down
                                do step();
                            }
                        }
                    }
                }

                do Sys.wait(100);

                let waited = waited - 1;
                if (waited = 0) {
                    do step();
                    let waited = difficulty;
                }

                let key = Keyboard.keyPressed();
                let held = held + 1;
            }

            do Random.keyPress(prevKey, prevWaited, held);
        }

        return;
    }

    method void step() {
        var int lines;

        if (tetromino.step()) {
            return;
        }

        let lines = board.clearFullLines();

        if (lines > 0) {
            let cleared = cleared + lines;

            if (cleared < 100) {
                let level = cleared / 10;
            } else {
                let level = 10;
            }

            let difficulty = 12 - level;
            do printScore();
        }

        let type = next;

        if (Random.isReady()) {
            let next = Random.next(7);
        } else {
            // Fallback for we don't yet have enough entropy yet.
            let next = type + 1;
            if (next > 6) {
                let next = 0;
            }
        }

        if (tetromino.reset(type, 3, 20)) {
            do tetromino.show();
            do showPreview();
        } else {
            do gameOver();
        }

        return;
    }

    method void printScore() {
        do Output.moveCursor(7, 8);
        do Output.printString("Level: ");
        do Output.printInt(level);

        do Output.moveCursor(15, 8);
        do Output.printString("Lines: ");
        do Output.printInt(cleared);

        return;
    }

    method void showPreview() {
        var int size;
        var Array tiles;

        let tiles = Tetromino.tiles(next, 0);
        let size = Tetromino.size(next);

        do Grid.drawPreview(tiles, size);

        return;
    }

    method void gameOver() {
        let exit = true;

        do board.clearLine(9);
        do board.clearLine(10);
        do board.clearLine(11);
        do board.clearLine(12);

        do Output.moveCursor(10, 30);
        do Output.printString("Game");
        do Output.moveCursor(11, 30);
        do Output.printString("Over");

        return;
    }
}
