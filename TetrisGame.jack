class TetrisGame {
    field Board board;
    field Tetromino tetromino;
    field int type, next, cleared, level, difficulty;
    field boolean exit;

    constructor TetrisGame new() {
        do Screen.clearScreen();

        let board = Board.new(196, 2, 21);

        let tetromino = Tetromino.new(0, 3, 19, board);
        do tetromino.show();

        let type = 0;
        let next = 1;
        let cleared = 0;
        let level = 0;
        let difficulty = 12;
        let exit = false;

        do printScore();
        do showPreview();

        do Output.moveCursor(11, 47);
        do Output.printString("Next:");

        return this;
    }

    method void dispose() {
        do tetromino.dispose();
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var char key;
        var int waited;

        let waited = difficulty;

        while (~exit) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do Sys.wait(100);

                let waited = waited - 1;
                if (waited = 0) {
                    do step();
                    let waited = difficulty;
                }
            }

            while (~(key = 0)) {
                if (key = 130) { // left
                    do tetromino.moveLeft();
                    do Random.seed(waited);
                } else {
                    if (key = 132) { // right
                        do tetromino.moveRight();
                        do Random.seed(waited + waited);
                    } else {
                        if (key = 131) { // up
                            do tetromino.rotate();
                            do Random.seed(waited + waited + waited);
                        } else {
                            if (key = 133) { // down
                                do step();
                                do Random.seed(waited + waited + waited + waited);
                            }
                        }
                    }
                }

                do Sys.wait(100);

                let waited = waited - 1;
                if (waited = 0) {
                    do step();
                    let waited = difficulty;
                }

                let key = Keyboard.keyPressed();
            }

            do Random.seed(waited);
        }

        return;
    }

    method void step() {
        var int lines;

        if (tetromino.step()) {
            return;
        }

        let lines = board.clearFullLines();

        if (~(lines = 0)) {
            let cleared = cleared + lines;

            if (cleared < 100) {
                let level = cleared / 10;
            } else {
                let level = 10;
            }

            let difficulty = 12 - level;

            do printScore();
        }

        let type = next;
        let next = Random.next(next);

        if (tetromino.reset(type, 3, 20)) {
            do tetromino.show();
            do showPreview();
        } else {
            do gameOver();
        }

        return;
    }

    method void printScore() {
        do Output.moveCursor(7, 8);
        do Output.printString("Level: ");
        do Output.printInt(level);

        do Output.moveCursor(15, 8);
        do Output.printString("Lines: ");
        do Output.printInt(cleared);

        return;
    }

    method void showPreview() {
        var int size;
        var Array tiles;

        let tiles = Tetromino.tiles(next, 0);
        let size = Tetromino.size(next);

        do Grid.drawPreview(tiles, size);

        return;
    }

    method void gameOver() {
        let exit = true;

        do board.clearLine(9);
        do board.clearLine(10);
        do board.clearLine(11);
        do board.clearLine(12);

        do Output.moveCursor(10, 30);
        do Output.printString("Game");
        do Output.moveCursor(11, 30);
        do Output.printString("Over");

        return;
    }
}
